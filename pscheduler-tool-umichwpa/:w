#!/usr/bin/env python3

#
# Development Order #5:
#
# This is the meat and bones of the tool, where the actual desired
# commands or operation will be run. The results are then recorded
# and added to the 'results' JSON data, which will then be sent
# back to the test. Both system and api are able to be used here.
#

import datetime
import subprocess
import json
import sys
import time
import os
import pscheduler

#error and diagnostic trackign
error = []
diags = []
authenticated = False
need_root = False


# from stdin
input = pscheduler.json_load(exit_on_error=True)

# Take input from test spec
try:
    interface = input['test']['spec']['interface']

except KeyError:
    error.append("No interface given")
    pscheduler.fail('Missing the interface in input')

try:
    path = input['test']['spec']['path']
except KeyError:
    error.append("No path given")
    pscheduler.fail('Missing the path in input')

try:
    driver = input['test']['spec']['driver']
except KeyError:
    diags.append("proceeding with default driver")

#TODO: Replce sudo stuff with the way it is implemented in pingj

duration = input['test']['spec'].get('duration', 'PT5S')
duration = pscheduler.timedelta_as_seconds( pscheduler.iso8601_as_timedelta(duration) ) 
timeout_iso = input['test']['spec'].get('timeout', 'PT10S')
timeout = pscheduler.timedelta_as_seconds( pscheduler.iso8601_as_timedelta(timeout_iso) )
succeeded = False
diags.append('interface: ' + interface)
diags.append('driver: ' + driver)
diags.append('path: ' + path)

#sleep until designated start time
try:
    pscheduler.sleep_until(input['schedule']['start'])
except KeyError:
    pscheduler.fail("Unable to find start time in input")

#remove the interface file if it exists
interface_path = '/var/run/wpa_supplicant' + interface
if os.path.exists(interface_path):
    need_root = True
    diags.append('Need root privelage to delete prior interface file')
    clear_interface = ["rm", interface_path]
    if need_root:
        clear_interface.insert(0, 'sudo') 
    # run the commands 
    status, stdout, stderr = pscheduler.run_program(clear_interface, timeout=timeout)
    if status:
        succeeded = False
        error.append("(failed to delete old interface file) Error returned: \n%s" % stderr.strip('\n'))
    else:
        succeeded = True
        diags.append("Successfully deleted old interface file")

# reset the need root flag as root might not be needed next time
need_root = False

# check if the EUID is not the root
if os.geteuid() != 0:
    need_root = True


#kill all previous wpa_supplicants
kill_wpa = ["killall", wpa_supplicant]
if need_root: 
    kill_wpa.insert(0, 'sudo')
status, stdout, stderr = pscheduler.run_program(kill_wpa, timeout=timeout)

#run wpa to authenticate
start_time = datetime.datetime.now()
wpa_auth = ['wpa_supplicant', '-i', interface, '-c', path, '-d', driver, -B]
if need_root: 
    wpa_auth.insert(0, 'sudo')
#run program has a line callback (look at that)
status, stdout, stderr = pscheduler.run_program(wpa_auth, timeout=timeout)

if status:
    succeeded = False
    error.append("Error returned: \n%s" % stderr.strip('\n'))
else:
    authenticated = True
    succeeded = True
    diags.append(stdout)

#get the end time for wpa_supplicant to be initialized
end_time = datetime.datetime.now()

# Organize results into json data
results = {
    'succeeded': succeeded,
    'result': {
        'schema': 1,
        'time': pscheduler.timedelta_as_iso8601( end_time - start_time),
        'succeeded': succeeded
        'authenticated': authenticated
    },
    'error': error,
    'diags': diags }

pscheduler.succeed_json(results)

