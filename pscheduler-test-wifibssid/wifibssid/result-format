#!/usr/bin/env python3

#
# Development Order #8:
#
# This file is called when perfSonar goes to print the result, which
# has been returned from the tool.
#
# To test this file, a result is needed. A sample one has been provided
# in this directory. Use the following syntax:
# cat example-result.json | ./result-format text/plain
# cat example-result.json | ./result-format text/html
#

import jsontemplate
import pscheduler
import sys

from validate import result_is_valid


try:
   format = sys.argv[1]
except IndexError:
   format = 'text/plain'

input = pscheduler.json_load(exit_on_error=True)

valid, message = result_is_valid(input["result"])

if not valid:
    pscheduler.fail(message)

result = input["result"]

# NOTE: For more-complex restult structures, the 'jsontemplate' module
# used in the spec-format method might be a better choice than
# print().

if format == 'text/plain':
    # Print results of the test here, in plaintext
    print('Time: %s\n' % result['time'])
    # Print ssid_list
    print('BSSIDs:')
    for entry in result['ssid_list']:
        print("    " + str(entry)) 
   
elif format == 'text/html':
    # Print results of the test here, in html
    print('<table>')
    print('    <tr>')
    print('        <td><b>Time</b></td>')
    print('        <td>%s</td>' % result['time'])
    print('    </tr>')
    print('    <tr>')
    print('        <td><b>BSSIDs</b></td><td>')
    print('    <br/>'.join(result['ssid_list']))
    print('    </td> </tr>')
    print('</table>')


else:
   pscheduler.fail("Unsupported format '%s'" % format)
